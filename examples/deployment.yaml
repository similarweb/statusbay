---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metadata-name
  labels:
    app.kubernetes.io/name: deploy-one
    app.kubernetes.io/managed-by: me
  annotations:
    statusier.io/application-name: "isan-applicaiton-annotations"
    # statusier.io/report-slack-channels: ""
    statusier.io/report-deploy-by: isan.rivkin@similarweb.com
    statusier.io/alerts-statuscake-tags: nginx
    statusier.io/kibana-query: "application: statusier AND mode: watcher-kubernetes"
    statusier.io/kibana-query-1: "application: statusier AND mode: watcher-nomad"
    statusier.io/kibana-query-2: "application: statusier AND mode: webserver"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: deploy-one
      app.kubernetes.io/instance: test-instance
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: deploy-one
        app.kubernetes.io/instance: test-instance
    spec:
      containers:
        - name: nginx
          image: nginx:latest
          imagePullPolicy: IfNotPresent
          env:
          - name: EXAMPLE
            value: "Environment variable1"
          livenessProbe:
            httpGet:
              path: /
              port: 80
            failureThreshold: 3
            periodSeconds: 2
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 3
            successThreshold: 1
            timeoutSeconds: 0
            httpGet:
              path: /
              port: 80
---
apiVersion: v1
kind: Service
metadata:
  name: service-name  
  labels:
    app.kubernetes.io/name: deploy-one
    app.kubernetes.io/instance: test-instance
spec:
  selector:
    app.kubernetes.io/name: deploy-one
    app.kubernetes.io/instance: test-instance
  type: NodePort
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80